{"version":3,"sources":["../../src/AuthCodeFunctions.tsx","../../src/AuthCodeLoader.tsx","../../src/AuthCodeMessage.tsx","../../src/AuthCodeProvider.tsx","FunctionsPage.tsx","App.tsx","index.tsx"],"names":["cookies","crypto","require","hasTokenExpired","storagePrefix","tokenExpired","accessTokenExpiry","localStorage","now","accessTokenExpiryDate","Date","hasAccessToken","accessToken","hasRefreshToken","refreshToken","doAuthorizationCodeFlow","authenticationProps","returnTo","isretry","postAuthenticationRedirect","window","codeLocation","getCodeLocation","useNonce","url","encodeURIComponent","buildRedirectUri","verifier","base64URLEncode","challenge","sha256","state","nonce","doLogoutFlow","redirectURI","path","pathMod","location","str","buffer","getURIParameterByName","name","results","RegExp","regex","decodeURIComponent","parseJwt","token","base64","base64Url","atob","c","requestHeaders","Loader","props","className","styles","style","Message","marginTop","onClick","onBtnClick","qs","initialState","loading","signinError","constructor","this","doLogout","prevProps","authenticationRequired","clearInterval","diffMs","AuthCodeFunctions","isRefresh","code","onReceiveAuthCode","onGetAuthCode","useState","codeState","origState","stateErr","console","onTokenObtainedError","Error","params","grant_type","client_id","redirect_uri","scope","axios","headers","response","error","refresh_token","setTimeout","processAuth","bind","idToken","origNonce","idTokenObj","JSON","expiryMins","expiryDate","cookiePath","expires","redirectpath","pathname","search","signInErrorComponent","text","btnText","retryAuth","loadertext","loaderComponent","AuthCodeProvider","enableDebugLog","signInText","signOutText","signInErrorText","refreshErrorText","PropTypes","history","onTokenObtained","onTokenRefreshed","onTokenRefreshedError","any","FunctionsPage","userInfoLoading","setUserInfoLoading","userInfo","setUserInfo","loggedIn","isLoggedIn","authProps","disabled","post","signRequest","then","catch","log","data","stringify","withRouter","authRequired","setAuthRequired","setDoLogout","setTokenLoaded","authUrl","callBackPath","tokenUrl","logoutUrl","logoutCallBackPath","clientId","clientSecret","usePkce","username","getItem","parse","e","loginstatus","pageinfo","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","width","id","to","exact","fontStyle","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.a6d177c7.chunk.js","sourcesContent":["import Cookies from 'universal-cookie'\n// eslint-disable-next-line no-unused-vars\nimport AuthCodeProps from './AuthCodeProps'\n\nconst cookies = new Cookies()\nconst crypto = require('crypto')\n\n/**\n * Returns true if there is a an access_token or refresh_token cookie present\n * (IE. authorization has been completed)\n */\nexport function isLoggedIn(storagePrefix: string = ''): boolean {\n  if (hasRefreshToken(storagePrefix)) {\n    return true\n  } else if (hasAccessToken(storagePrefix) && !hasTokenExpired(storagePrefix)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Determines if the current access_token is still valid (2 minute leeway)\n */\nexport function hasTokenExpired(storagePrefix: string = ''): boolean {\n  let tokenExpired: boolean = false\n  const accessTokenExpiry: any = localStorage.getItem(\n    storagePrefix + 'access_token_expiry'\n  )\n  if (accessTokenExpiry) {\n    var now = new Date()\n    const accessTokenExpiryDate = new Date(accessTokenExpiry)\n    if (now >= accessTokenExpiryDate) {\n      tokenExpired = true\n    }\n  }\n  return tokenExpired\n}\n\n/**\n * Returns true if there is an access token cookie present\n */\nexport function hasAccessToken(storagePrefix: string = ''): boolean {\n  return !!accessToken(storagePrefix)\n}\n\n/**\n * Returns the access_token which is saved as a cookie\n */\nexport function accessToken(storagePrefix: string = ''): string {\n  return cookies.get(storagePrefix + 'access_token')\n}\n\n/**\n * Returns true if there is a refresh token cookie present\n */\nexport function hasRefreshToken(storagePrefix: string = ''): boolean {\n  return !!refreshToken(storagePrefix)\n}\n\n/**\n * Returns the refresh_token which is saved as a cookie\n */\nexport function refreshToken(storagePrefix: string = ''): string {\n  return cookies.get(storagePrefix + 'refresh_token')\n}\n\n/**\n * Adds Authorization = 'Bearer access_token' to request headers if an access_token is present\n * @requestHeaders An object containing the headers of the request to be sent\n */\nexport function signRequest(\n  requestHeaders: any,\n  storagePrefix: string = ''\n): any {\n  if (!requestHeaders) {\n    requestHeaders = {}\n  }\n  const token = accessToken(storagePrefix)\n  if (token) {\n    requestHeaders.Authorization = 'Bearer ' + token\n  }\n  return requestHeaders\n}\n\n/**\n * Begins authorization by redirecting to the authorization endpoint of the authentication server\n * @authenticationProps An object containing authentication properties\n * @returnTo The path to go back to after authorization has been completed. If not set it will use the current path\n */\nexport function doAuthorizationCodeFlow(\n  authenticationProps: AuthCodeProps,\n  returnTo: string | null = null,\n  storagePrefix: string = '',\n  isretry: boolean = false\n): void {\n  cookies.remove(storagePrefix + 'access_token')\n  cookies.remove(storagePrefix + 'refresh_token')\n  localStorage.removeItem(storagePrefix + 'id_token')\n  if (\n    !isretry ||\n    !localStorage.getItem(storagePrefix + 'authcode_authentication_redirect')\n  ) {\n    let postAuthenticationRedirect = returnTo\n    if (postAuthenticationRedirect == null) {\n      postAuthenticationRedirect =\n        window.location.pathname + window.location.search\n    }\n    localStorage.setItem(\n      storagePrefix + 'authcode_authentication_redirect',\n      postAuthenticationRedirect\n    )\n  }\n  const codeLocation = getCodeLocation(authenticationProps)\n  window.location.replace(codeLocation)\n}\n\nfunction getCodeLocation(\n  authenticationProps: AuthCodeProps,\n  storagePrefix: string = ''\n): string {\n  const {\n    authUrl,\n    callBackPath,\n    clientId,\n    scope,\n    usePkce,\n    useState,\n    useNonce\n  } = authenticationProps\n\n  let url = authUrl\n  url += '?client_id=' + clientId\n  url += '&response_type=code'\n  if (scope) {\n    url += '&scope=' + encodeURIComponent(scope)\n  }\n\n  url += '&redirect_uri=' + encodeURIComponent(buildRedirectUri(callBackPath))\n\n  if (usePkce) {\n    const verifier = base64URLEncode(crypto.randomBytes(32))\n    const challenge = base64URLEncode(sha256(verifier))\n    localStorage.setItem(storagePrefix + 'authcode_v', verifier)\n\n    url += '&code_challenge=' + challenge\n    url += '&code_challenge_method=S256'\n  } else {\n    localStorage.removeItem(storagePrefix + 'authcode_v')\n  }\n\n  if (useState) {\n    const state = base64URLEncode(crypto.randomBytes(32))\n    localStorage.setItem(storagePrefix + 'authcode_state', state)\n\n    url += '&state=' + state\n  } else {\n    localStorage.removeItem(storagePrefix + 'authcode_state')\n  }\n\n  if (useNonce) {\n    const nonce = base64URLEncode(crypto.randomBytes(32))\n    localStorage.setItem(storagePrefix + 'authcode_nonce', nonce)\n\n    url += '&nonce=' + nonce\n  } else {\n    localStorage.removeItem(storagePrefix + 'authcode_nonce')\n  }\n\n  return url\n}\n\n/**\n * Begins logout by redirecting to the logout endpoint of the authentication server\n * @authenticationProps An object containing authentication properties\n */\nexport function doLogoutFlow(\n  authenticationProps: AuthCodeProps,\n  storagePrefix: string = ''\n): void {\n  cookies.remove(storagePrefix + 'access_token')\n  cookies.remove(storagePrefix + 'refresh_token')\n  localStorage.removeItem(storagePrefix + 'id_token')\n\n  const redirectURI = encodeURIComponent(\n    buildRedirectUri(\n      authenticationProps.logoutCallBackPath == null\n        ? ''\n        : authenticationProps.logoutCallBackPath\n    )\n  )\n  window.location.replace(\n    authenticationProps.logoutUrl +\n      '?post_logout_redirect_uri=' +\n      redirectURI +\n      '&returnTo=' +\n      redirectURI +\n      '&client_id=' +\n      authenticationProps.clientId\n  )\n}\n\n/**\n * Gets the full redirectUri from a path name\n */\nexport function buildRedirectUri(path: string): string {\n  let pathMod = path\n  if (!pathMod) {\n    pathMod = ''\n  }\n  if (\n    pathMod.toUpperCase().includes('HTTP://') ||\n    pathMod.toUpperCase().includes('HTTPS://')\n  ) {\n    return pathMod\n  } else {\n    return location.protocol + '//' + location.host + pathMod\n  }\n}\n\n/**\n * base64 encodes a url\n * @str url\n * @returns string - base64 encoded url\n */\nexport function base64URLEncode(str: any): string {\n  return str\n    .toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '')\n}\n\n/**\n * sha256 encodes a string\n * @buffer string\n * @returns string - sha256 encoded version of buffer\n */\nexport function sha256(buffer: string): string {\n  return crypto.createHash('sha256').update(buffer).digest()\n}\n\n/**\n * Gets the value of a uri parameter\n * @name string - the name of the parameter\n * @url string - the url to get the parameter value from\n */\nexport function getURIParameterByName(name: string, url: string) {\n  name = name.replace(/[[\\]]/g, '\\\\$&')\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)')\n  const results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\n/**\n * Decode Jwt to json string\n * @token id_token\n */\nexport function parseJwt(token: string): string {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      })\n      .join('')\n  )\n  return jsonPayload\n}\n","import React from 'react'\nimport styles from './styles.module.css'\n\ninterface ILoaderProps {\n  text?: string\n  styles?: any\n}\n\nconst Loader = (props: ILoaderProps) => {\n  return (\n    <div className={styles['loader-box']} style={props.styles}>\n      <div className={styles['pulse-container']}>\n        <div\n          className={styles['pulse-bubble'] + ' ' + styles['pulse-bubble-1']}\n        />\n        <div\n          className={styles['pulse-bubble'] + ' ' + styles['pulse-bubble-2']}\n        />\n        <div\n          className={styles['pulse-bubble'] + ' ' + styles['pulse-bubble-3']}\n        />\n      </div>\n      {props.text ? (\n        <div className={styles['loader-text']}>{props.text}</div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Loader\n","import React from 'react'\nimport styles from './styles.module.css'\n\ninterface ILoaderProps {\n  text?: string\n  styles?: any\n  btnText?: string\n  onBtnClick?: () => void\n}\n\nconst Message = (props: ILoaderProps) => {\n  return (\n    <div className={styles['loader-box']} style={props.styles}>\n      {props.text ? (\n        <div className={styles['loader-text']}>\n          {props.text}\n          {props.onBtnClick ? (\n            <div>\n              <button\n                className='btn btn-primary'\n                style={{ marginTop: '15px' }}\n                onClick={props.onBtnClick}\n              >\n                {props.btnText}\n              </button>\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Message\n","import * as React from 'react'\nimport PropTypes from 'prop-types'\nimport Cookies from 'universal-cookie'\nimport axios from 'axios'\nimport * as AuthCodeFunctions from './AuthCodeFunctions'\n// eslint-disable-next-line no-unused-vars\nimport AuthCodeProps from './AuthCodeProps'\nimport Loader from './AuthCodeLoader'\nimport Message from './AuthCodeMessage'\n\nconst cookies = new Cookies()\nconst qs = require('querystring')\n\ninterface IAuthCodeProviderProps {\n  children?: any\n  authenticationRequired?: boolean\n  doLogout?: boolean\n  authenticationProps: AuthCodeProps\n  returnTo?: string\n  history: any\n  storagePrefix: string\n  cookiePath: string\n  onGetAuthCode?: () => void\n  onReceiveAuthCode?: (authcode: string) => void\n  onTokenObtained?: (data: any) => void\n  onTokenObtainedError?: (error: Error) => void\n  onTokenRefreshed?: (data: any) => void\n  onTokenRefreshedError?: (error: Error) => void\n  enableDebugLog?: boolean\n  signInText: string\n  signOutText: string\n  signInErrorText: string\n  refreshErrorText: string\n  loaderComponent?: (props: any) => JSX.Element\n  signInErrorComponent?: (props: any) => JSX.Element\n}\n\ninterface IAuthCodeProviderState {\n  loading: boolean\n  signinError: boolean\n}\n\nconst initialState: IAuthCodeProviderState = {\n  loading: true,\n  signinError: false\n}\n\nclass AuthCodeProvider extends React.Component<\n  IAuthCodeProviderProps,\n  IAuthCodeProviderState\n> {\n  static defaultProps = {\n    authenticationRequired: true,\n    doLogout: false,\n    storagePrefix: '',\n    cookiePath: '/',\n    enableDebugLog: false,\n    signInText: 'Signing you in...',\n    signOutText: 'Signing you out...',\n    signInErrorText:\n      'Sorry, we were unable to sign you in. Please try again later.',\n    refreshErrorText: 'Your session has expired.\\nSign in again to continue.'\n  }\n\n  static propTypes = {\n    /**\n     * A prop used to toggle whether authentication is required.\n     * If false children will be rendered.\n     * If true, children will only be rendered when authenticated.\n     * Changing from false to true can be used to start the authentication flow.\n     */\n    authenticationRequired: PropTypes.bool,\n\n    /**\n     * A prop used to begin the logout flow.\n     * Changing from false to true can be used to start the logout flow.\n     */\n    doLogout: PropTypes.bool,\n\n    /**\n     * An instance of the AuthCodeAuthentication class. This contains properties needed to for the authentication flow.\n     */\n    authenticationProps: PropTypes.object.isRequired,\n\n    /**\n     * Once a token has been retrieved this is the path to redirect back to. If not set it will redirect back to the current path.\n     */\n    returnTo: PropTypes.string,\n\n    /**\n     * React router history object. If set this will be used for post authentication redirects and removing the code parameter.\n     * If not provided the page will be reloaded to remove the code parameter and redirect.\n     */\n    history: PropTypes.any,\n\n    /**\n     * Used if you are aythenticating with multiple oauth2 servers, you can store multiple access tokens.\n     * The second/third/etc instance should have a unique prefixes.\n     */\n    storagePrefix: PropTypes.string,\n\n    /**\n     * Determines the Path for cookies. If hosting in a subdirectory you should set this to the subdirectory path (/subdriectory)\n     */\n    cookiePath: PropTypes.string,\n\n    /**\n     * A call back function that is called before being redirecting to the authorization endpoint.\n     */\n    onGetAuthCode: PropTypes.func,\n\n    /**\n     * A call back function that is called when redirected back to the application with the Code parameter populated.\n     */\n    onReceiveAuthCode: PropTypes.func,\n\n    /**\n     * A call back function that is called after retrieving an access token.\n     */\n    onTokenObtained: PropTypes.func,\n\n    /**\n     * A call back function that is called if there is an error retrieving an access token.\n     */\n    onTokenObtainedError: PropTypes.func,\n\n    /**\n     * A call back function that is called after retrieving an access token from a refresh token in the background.\n     */\n    onTokenRefreshed: PropTypes.func,\n\n    /**\n     * A call back function that is called if there is an error retrieving access token from a refresh token in the background.\n     */\n    onTokenRefreshedError: PropTypes.func,\n\n    /**\n     * Set to true to allow addiitonal logging to the console\n     */\n    enableDebugLog: PropTypes.bool,\n\n    /**\n     * The label 'Signing you in'\n     */\n    signInText: PropTypes.string,\n\n    /**\n     * The label 'Signing you out'\n     */\n    signOutText: PropTypes.string,\n\n    /**\n     * The label 'Sorry, we were unable to sign you in. Please try again later.'\n     */\n    signInErrorText: PropTypes.string,\n\n    /**\n     * The label 'Your session has expired.\\nSign in again to continue.'\n     */\n    refreshErrorText: PropTypes.string,\n\n    /**\n     * You can use this prop to override the Loader with your own component.\n     * The component must support the props: text<string>.\n     */\n    loaderComponent: PropTypes.any,\n\n    /**\n     * You can use this prop to override the Sign in error message with your own component.\n     * The component must support the props: text<string>, btnText<string>, onBtnClick<function>.\n     */\n    signInErrorComponent: PropTypes.any\n  }\n\n  refreshTimer: any\n\n  constructor(props: IAuthCodeProviderProps) {\n    super(props)\n    this.state = initialState\n    this.retryAuth = this.retryAuth.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.props.doLogout) {\n      this.doLogout()\n    } else {\n      this.processAuth(false)\n    }\n  }\n\n  componentDidUpdate(prevProps: IAuthCodeProviderProps): void {\n    if (this.props.doLogout && !prevProps.doLogout) {\n      this.doLogout()\n    } else if (\n      this.props.authenticationRequired &&\n      !prevProps.authenticationRequired\n    ) {\n      this.processAuth(false)\n    }\n  }\n\n  componentWillUnmount() {\n    // Clean up\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer)\n      this.refreshTimer = null\n    }\n  }\n\n  /**\n   * Checks to see if any action is required to authenticate, and iniates it if neccessary.\n   */\n  private processAuth(isRefresh: boolean): void {\n    this.debugit('Authentication Required')\n    let tokenExpired: boolean = false\n    const accessTokenExpiry: any = localStorage.getItem(\n      this.props.storagePrefix + 'access_token_expiry'\n    )\n    if (accessTokenExpiry) {\n      var now = new Date()\n      const accessTokenExpiryDate = new Date(accessTokenExpiry)\n      if (now >= accessTokenExpiryDate) {\n        tokenExpired = true\n      } else {\n        const diffMs = accessTokenExpiryDate.valueOf() - now.valueOf()\n        this.setTokenRefresh(diffMs)\n      }\n    }\n\n    if (\n      AuthCodeFunctions.hasAccessToken(this.props.storagePrefix) &&\n      !tokenExpired\n    ) {\n      // We have an access token already, no need to do anything\n      this.debugit(\n        'Access token present and valid. Expiry = ' + accessTokenExpiry\n      )\n      if (this.state.loading) {\n        this.setState({ loading: false })\n      }\n    } else if (AuthCodeFunctions.hasRefreshToken(this.props.storagePrefix)) {\n      // We have a refresh token but no access token, use this to get a new access token\n      this.debugit('Refresh token present. Feteching new access token')\n      this.doRefreshFlow(isRefresh)\n    } else if (isRefresh) {\n      // Encountered an issue - display error\n      this.sessionExpired()\n    } else {\n      const code = AuthCodeFunctions.getURIParameterByName(\n        'code',\n        window.location.href\n      )\n      if (code) {\n        // We have an authentication code, trade for token\n        this.debugit('Authentication code detected. Fetching token')\n        if (this.props.onReceiveAuthCode != null) {\n          this.props.onReceiveAuthCode(code)\n        }\n        this.tradeCodeForToken(code)\n      } else if (this.props.authenticationRequired) {\n        // We have nothing, time to get a code\n        this.debugit('Redirecting to authoisation endpoint')\n        this.getAuthCode()\n      } else {\n        // authentication not required\n        this.setState({ loading: false })\n      }\n    }\n  }\n\n  /**\n   * Iniates the logout flow\n   */\n  private doLogout(): void {\n    AuthCodeFunctions.doLogoutFlow(\n      this.props.authenticationProps,\n      this.props.storagePrefix\n    )\n  }\n\n  /**\n   * Sets up redirect to the authorization endpoint\n   * @param isretry set to true if this is the second/third/nth attempt after an error with the first\n   */\n  private getAuthCode(isretry: boolean = false): void {\n    if (this.props.onGetAuthCode != null) {\n      this.props.onGetAuthCode()\n    }\n    this.setState({ loading: true })\n    AuthCodeFunctions.doAuthorizationCodeFlow(\n      this.props.authenticationProps,\n      this.props.returnTo,\n      this.props.storagePrefix,\n      isretry\n    )\n  }\n\n  /**\n   * Trade the Code in the uri for a token using by doing a post to the token endpoint\n   * @param code the code from the code query string parameter\n   */\n  private tradeCodeForToken(code: string): void {\n    const {\n      tokenUrl,\n      callBackPath,\n      clientId,\n      clientSecret,\n      scope,\n      usePkce,\n      useState\n    } = this.props.authenticationProps\n    this.debugit('Code url: ' + window.location.href)\n\n    if (useState) {\n      const codeState = AuthCodeFunctions.getURIParameterByName(\n        'state',\n        window.location.href\n      )\n      const origState = localStorage.getItem(\n        this.props.storagePrefix + 'authcode_state'\n      )\n      if (codeState !== origState) {\n        const stateErr = 'State does not match'\n        this.debugit(stateErr)\n        console.log(stateErr)\n        if (this.props.onTokenObtainedError != null) {\n          this.props.onTokenObtainedError(new Error(stateErr))\n        }\n        this.setState({ signinError: true })\n      } else {\n        this.debugit('State matches ' + origState)\n      }\n      localStorage.removeItem(this.props.storagePrefix + 'authcode_state')\n    }\n\n    const params: any = {\n      grant_type: 'authorization_code',\n      client_id: clientId,\n      redirect_uri: AuthCodeFunctions.buildRedirectUri(callBackPath),\n      scope: scope,\n      code: code\n    }\n    if (clientSecret) {\n      params.client_secret = clientSecret\n    }\n    if (scope) {\n      params.scope = scope\n    }\n\n    if (usePkce) {\n      const verifier = localStorage.getItem(\n        this.props.storagePrefix + 'authcode_v'\n      )\n      if (verifier) {\n        params.code_verifier = verifier\n      }\n    }\n\n    axios\n      .post(tokenUrl, qs.stringify(params), {\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded'\n        }\n      })\n      .then((response: any) => {\n        this.debugit('Access token response')\n        this.debugit(response)\n        if (!response.data || !response.data.access_token) {\n          throw new Error('Access token not present in token response')\n        }\n        if (response.data.error) {\n          throw new Error(response.data.error_description)\n        }\n\n        this.setTokens(response.data, false)\n\n        if (this.props.onTokenObtained != null) {\n          this.props.onTokenObtained(response.data)\n        }\n      })\n      .catch((error: any) => {\n        console.log(error)\n        this.debugit('Access token error')\n        this.debugit(error?.response)\n        if (this.props.onTokenObtainedError != null) {\n          this.props.onTokenObtainedError(error)\n        }\n        this.setState({ signinError: true })\n      })\n  }\n\n  /**\n   * Use the refresh token to obtain a new access token. Does a post to the token endpoints\n   * @param isRefresh if this is happening in the background (not initial fetch)\n   */\n  private doRefreshFlow(isRefresh: boolean): void {\n    const {\n      tokenUrl,\n      callBackPath,\n      clientId,\n      clientSecret,\n      scope\n    } = this.props.authenticationProps\n\n    const params: any = {\n      grant_type: 'refresh_token',\n      client_id: clientId,\n      redirect_uri: AuthCodeFunctions.buildRedirectUri(callBackPath),\n      scope: scope,\n      refresh_token: AuthCodeFunctions.refreshToken(this.props.storagePrefix)\n    }\n    if (clientSecret) {\n      params.client_secret = clientSecret\n    }\n    if (scope) {\n      params.scope = scope\n    }\n\n    axios\n      .post(tokenUrl, qs.stringify(params), {\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded'\n        }\n      })\n      .then((response: any) => {\n        this.debugit('Refresh token response')\n        this.debugit(response)\n        if (!response.data || !response.data.access_token) {\n          throw new Error('Access token not present in token response')\n        }\n        if (response.data.error) {\n          throw new Error(response.data.error_description)\n        }\n\n        this.setTokens(response.data, true)\n\n        if (!isRefresh) {\n          if (this.props.onTokenObtained != null) {\n            this.props.onTokenObtained(response.data)\n          }\n        } else {\n          if (this.props.onTokenRefreshed != null) {\n            this.props.onTokenRefreshed(response.data)\n          }\n        }\n      })\n      .catch((error: any) => {\n        console.log(error)\n        this.debugit('Refresh token error')\n        this.debugit(error?.response)\n        if (!isRefresh) {\n          if (this.props.authenticationRequired) {\n            this.setState({ signinError: true })\n          } else {\n            this.setState({ loading: false })\n            cookies.remove(this.props.storagePrefix + 'refresh_token')\n            localStorage.removeItem(this.props.storagePrefix + 'id_token')\n          }\n          if (this.props.onTokenObtainedError != null) {\n            this.props.onTokenObtainedError(error)\n          }\n        } else {\n          if (this.props.onTokenRefreshedError != null) {\n            this.props.onTokenRefreshedError(error)\n          }\n        }\n      })\n  }\n\n  /**\n   * If token expires mid session, or refresh fails mid session, this is called to get the user to take action to re-authorize.\n   */\n  private sessionExpired(): void {\n    var expiredresult = window.confirm(this.props.refreshErrorText)\n    if (expiredresult) {\n      this.retryAuth()\n    } else {\n      setTimeout(this.processAuth.bind(this, true), 60000)\n    }\n  }\n\n  /**\n   * Handles token endpoint response and saves tokens\n   * @param response response from the token endpoint\n   * @param isrefresh if this is happening in the background (not initial fetch)\n   */\n  private setTokens(response: any, isrefresh: boolean): void {\n    // save id token in storage and check nonce\n    const idToken = response.id_token\n    if (idToken) {\n      const origNonce = localStorage.getItem(\n        this.props.storagePrefix + 'authcode_nonce'\n      )\n      if (this.props.authenticationProps.useNonce && origNonce) {\n        const idTokenObj = JSON.parse(AuthCodeFunctions.parseJwt(idToken))\n        if (idTokenObj) {\n          if (idTokenObj.nonce !== origNonce) {\n            console.log(idTokenObj)\n            this.debugit('Expected nonce ' + origNonce)\n            this.debugit('Actual nonce ' + idTokenObj.nonce)\n            throw new Error('Nonce does not match')\n          } else {\n            this.debugit('Nonce matches ' + origNonce)\n          }\n        }\n      }\n      if (origNonce) {\n        localStorage.removeItem(this.props.storagePrefix + 'authcode_nonce')\n      }\n\n      localStorage.setItem(this.props.storagePrefix + 'id_token', idToken)\n    }\n\n    let expiryMins = 60\n    if (response.expires_in) {\n      expiryMins = response.expires_in / 60\n    }\n    // We remove 2 minutes from the expiry to give a buffer for refresh\n    expiryMins = expiryMins - 2\n    if (expiryMins < 1) {\n      expiryMins = 1\n    }\n    this.debugit('Token expiry mins: ' + expiryMins)\n\n    const now = new Date()\n    const expiryDate = new Date(now.getTime() + expiryMins * 60000)\n    localStorage.setItem(\n      this.props.storagePrefix + 'access_token_expiry',\n      expiryDate.toString()\n    )\n\n    cookies.set(\n      this.props.storagePrefix + 'access_token',\n      response.access_token,\n      { path: this.props.cookiePath }\n    )\n    this.debugit('New Access Token: ' + response.access_token)\n\n    // update refresh token cookie\n    let refreshToken = response.refresh_token\n    if (!refreshToken) {\n      refreshToken = AuthCodeFunctions.refreshToken(this.props.storagePrefix)\n    }\n    if (refreshToken) {\n      cookies.set(this.props.storagePrefix + 'refresh_token', refreshToken, {\n        path: this.props.cookiePath,\n        expires: new Date(now.setMonth(now.getMonth() + 4))\n      })\n      this.debugit('New Refresh Token: ' + response.access_token)\n    }\n\n    this.setTokenRefresh(1 * 60 * 1000)\n\n    if (!isrefresh) {\n      // Remove Verifier\n      const verifier = localStorage.getItem(\n        this.props.storagePrefix + 'authcode_v'\n      )\n      if (verifier) {\n        localStorage.removeItem(this.props.storagePrefix + 'authcode_v')\n      }\n\n      // Redirect if set\n      let redirectpath = localStorage.getItem(\n        this.props.storagePrefix + 'authcode_authentication_redirect'\n      )\n      if (!redirectpath) {\n        redirectpath = ''\n      } else {\n        localStorage.removeItem(\n          this.props.storagePrefix + 'authcode_authentication_redirect'\n        )\n      }\n      if (this.props.history) {\n        this.props.history.replace({\n          pathname: redirectpath.includes('?')\n            ? redirectpath.substring(0, redirectpath.indexOf('?'))\n            : redirectpath,\n          search: redirectpath.includes('?')\n            ? redirectpath.substring(redirectpath.indexOf('?'))\n            : ''\n        })\n      } else {\n        window.location.replace(redirectpath)\n      }\n    }\n\n    if (this.state.loading) {\n      this.setState({ loading: false })\n    }\n  }\n\n  /**\n   * Does a set timeout to allow a refresh when the token expires\n   * @param expiryMilliSecs Milliseconds until token expiry minus 2 mins\n   */\n  private setTokenRefresh(expiryMilliSecs: number) {\n    // Set up refresh interval\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer)\n      this.refreshTimer = null\n    }\n    this.refreshTimer = setTimeout(\n      this.processAuth.bind(this, true),\n      expiryMilliSecs\n    )\n  }\n\n  /**\n   * Retry the authorization if it has failed\n   */\n  private retryAuth(): void {\n    cookies.remove(this.props.storagePrefix + 'access_token')\n    cookies.remove(this.props.storagePrefix + 'refresh_token')\n    localStorage.removeItem(this.props.storagePrefix + 'id_token')\n    this.getAuthCode(true)\n  }\n\n  /**\n   * Log additional information\n   * @param line what to log\n   */\n  private debugit(line: string): void {\n    if (this.props.enableDebugLog) {\n      console.log(line)\n    }\n  }\n\n  render() {\n    if (this.state.signinError) {\n      return React.createElement(\n        this.props.signInErrorComponent\n          ? this.props.signInErrorComponent\n          : Message,\n        {\n          text: this.props.signInErrorText,\n          btnText: 'Retry',\n          onBtnClick: this.retryAuth\n        }\n      )\n    }\n\n    if (this.state.loading || this.props.doLogout) {\n      const loadertext = this.props.doLogout\n        ? this.props.signOutText\n        : this.props.signInText\n      return React.createElement(\n        this.props.loaderComponent ? this.props.loaderComponent : Loader,\n        { text: loadertext }\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport default AuthCodeProvider\n","import React, { useState } from 'react'\nimport { AuthCodeFunctions } from 'react-oauth2-authcode-provider'\nimport axios from 'axios'\n\nconst FunctionsPage = (props: any) => {\n  const [userInfoLoading, setUserInfoLoading] = useState<boolean>(false)\n  const [userInfo, setUserInfo] = useState<any>(null)\n  const loggedIn = AuthCodeFunctions.isLoggedIn()\n\n  return (\n    <div>\n      <div className='mt-3 mb-3'>x\n        <button className='btn btn-primary mr-3' onClick={() => AuthCodeFunctions.doAuthorizationCodeFlow(props.authProps, '/functions')}>Start Authorization Code Flow</button>\n        <button className='btn btn-primary mr-3' onClick={() => AuthCodeFunctions.doLogoutFlow(props.authProps)}>Start Log out Flow</button>\n      </div>\n      <div className='mt-3 mb-3'>\n        <button className='btn btn-primary mr-3' disabled={!loggedIn} onClick={() => {\n          setUserInfoLoading(true)\n          axios\n          .post('https://dev-emf33n24.eu.auth0.com/userinfo', null, {\n            headers: AuthCodeFunctions.signRequest({\n              'content-type': 'application/json'\n            })\n          })\n          .then((response: any) => {\n            setUserInfoLoading(false)\n            setUserInfo(response)\n          })\n          .catch((error: any) => {\n            console.log(error)\n            setUserInfoLoading(false)\n            setUserInfo(error)\n          })\n        }}>Get User Info</button>\n        {userInfoLoading ? 'Loading...' : ''}\n        {userInfo && !userInfoLoading ? <div className='mt-2'>{userInfo?.data ? JSON.stringify(userInfo?.data) : 'Error'}</div> : ''}\n      </div>\n    </div>\n  )\n\n}\n\nexport default FunctionsPage\n","import React, { useState } from 'react'\nimport {\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from 'react-router-dom'\nimport { AuthCodeProvider, AuthCodeFunctions, AuthCodeProps } from 'react-oauth2-authcode-provider'\nimport 'react-oauth2-authcode-provider/dist/index.css'\nimport FunctionsPage from './FunctionsPage'\n\nconst App = (props: any) => {\n  const [authRequired, setAuthRequired] = useState(false)\n  const [doLogout, setDoLogout] = useState(false)\n  const [, setTokenLoaded] = useState<any>(null) // This is being used to refresh the nav bar on sign in status change\n\n  const authProps: AuthCodeProps = {\n    authUrl: 'https://dev-emf33n24.eu.auth0.com/authorize',\n    callBackPath: '/react-oauth2-authcode-provider/',\n    tokenUrl: 'https://dev-emf33n24.eu.auth0.com/oauth/token',\n    logoutUrl: 'https://dev-emf33n24.eu.auth0.com/v2/logout',\n    logoutCallBackPath: '/react-oauth2-authcode-provider/',\n    clientId: '0ujnTs1Uynm6W83ygzbkuRkMhqdTrZ26',\n    clientSecret: 'DhYAsb9z9LxMDsZL3shPFaB90sCSqMptPaMU-EnB7fEUv-ECbMjqlvn6nQTOVoLG',\n    scope: 'openid profile email phone address offline_access',\n    usePkce: true,\n    useState: true,\n    useNonce: true\n  }\n\n  const loggedIn = AuthCodeFunctions.isLoggedIn()\n  let username = ''\n  const idToken = localStorage.getItem('id_token')\n  if (idToken) {\n    try { \n      const idTokenObj = JSON.parse(AuthCodeFunctions.parseJwt(idToken))\n      if (idTokenObj){\n        username = idTokenObj.name\n      } \n    } catch (e) {\n      /*invalid json*/\n    };\n  }\n\n  const loginstatus = \n    <div>\n      {'You '}\n      <b>{loggedIn ? 'are' : 'are not'}</b>\n      {' logged in'}\n      <b>{loggedIn && username ? ' as ' + username : ''}</b>\n      {'.'}\n    </div>\n\n  const pageinfo = \n    <div className='mt-4 mb-5'>\n      <hr className='mb-4' />\n      <p>\n        These examples use a example Auth0 authorization server.\n      </p>\n      <div className='row'>\n        <div className=\"col-lg-4\">\n          <div className=\"card h-100 m-1\">\n            <div className=\"card-body\">\n              <p>\n                The <b>No Auth page</b> does not require you to be logged in to access.\n                You can initiate the OAuth2 Authorization code flow by selecting the login button though.\n              </p>\n              <p>\n                It uses the AuthCodeProvider component with authenticationRequired = the state of whether the log in button has been pressed.\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-4\">\n          <div className=\"card h-100 m-1\">\n            <div className=\"card-body\">\n              <p>\n                The <b>Auth Required page</b> requires you to be logged in to access.\n                Browsing too this page will initiate the OAuth2 Authorization code flow if you are not already logged in.\n              </p>\n              <p>\n                It uses the AuthCodeProvider component with authenticationRequired = true.\n              </p>\n              <p>\n                You can also use this implementation to require authentication for the whole application.\n                To require authentication for the whole application, render a single instance of AuthCodeProvider in a top level component (E.g App).\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-4\">\n          <div className=\"card h-100 m-1\">\n            <div className=\"card-body\">\n              <p>\n                The <b>Functions page</b> has alternate methods to begin the Authorization code or Logout flows.\n                These methods use Functions to initiate the flow instead of parsing props to AuthCodeProvider.\n                This is useful for starting the flows in deep nested components instead of passing variables up the stack.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n  return (\n    <div>\n      <nav className='navbar navbar-expand-lg navbar-dark bg-secondary fixed-top'>\n          <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarSupportedContent' aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation'>\n              <span className='navbar-toggler-icon'></span>\n          </button>\n          <div style={{width:'100%'}}>\n            <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n                <ul className='navbar-nav ml-lg-5' data-toggle='collapse' data-target='.navbar-collapse.show'>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/' ? 'nav-link active' : 'nav-link'} to='/'>No Auth</Link>\n                    </li>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/authrequired' ? 'nav-link active' : 'nav-link'} to='/authrequired'>Auth Required</Link>\n                    </li>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/functions' ? 'nav-link active' : 'nav-link'} to='/functions'>Functions</Link>\n                    </li>\n                </ul>\n\n                { props.location.pathname === '/functions' ? '' :\n                  <ul className='navbar-nav ml-auto mr-lg-5' data-toggle='collapse' data-target='.navbar-collapse.show'>\n                      { loggedIn ? \n                      <li className='nav-item mr-lg-3'>\n                          <button className='nav-link btn btn-link' onClick={() => setDoLogout(true)}>Logout</button>\n                      </li>\n                      :\n                      <li className='nav-item mr-lg-3'>\n                          <button className='nav-link btn btn-link' onClick={() => setAuthRequired(true)}>Login</button>\n                      </li>\n                      }\n                  </ul>\n                }\n            </div>\n          </div>\n      </nav>\n      <div className='ml-lg-5 ml-3 mr-lg-5 mr-3' style={{marginTop: '100px'}}>\n          <h1 className='mb-3'>react oauth2 authcode provider examples</h1>\n          <Switch>\n            <Route exact path='/'>\n\n              <AuthCodeProvider\n                authenticationProps={authProps}\n                history={props.history}\n                authenticationRequired={authRequired}\n                doLogout={doLogout}\n                enableDebugLog={true}\n                onTokenObtained={(data) => setTokenLoaded(data)}\n                onTokenObtainedError={(error) => { setTokenLoaded(error)}}\n                returnTo={'/'}\n                cookiePath={'/react-oauth2-authcode-provider'}\n              >\n                <h3>No Auth</h3>\n                <span style={{fontStyle: 'italic'}}>\n                  This page does not require you to be logged in, but you can log in with the login button on the nav bar.\n                </span>\n                {loginstatus}\n                {pageinfo}\n              </AuthCodeProvider>\n\n            </Route>\n            <Route exact path='/functions'>\n\n              <AuthCodeProvider\n                authenticationProps={authProps}\n                history={props.history}\n                authenticationRequired={false}\n                enableDebugLog={true}\n                onTokenObtained={(data) => setTokenLoaded(data)}\n                onTokenObtainedError={(error) => { setTokenLoaded(error)}}\n                returnTo={'/functions'}\n                cookiePath={'/react-oauth2-authcode-provider'}\n              >\n                <h3>Functions</h3>\n                <span style={{fontStyle: 'italic'}}>\n                  This page has functions to manually initiate the Authorization code flow or logout flow using functions.\n                </span>\n                {loginstatus}\n                <FunctionsPage authProps={authProps} />\n                {pageinfo}\n              </AuthCodeProvider>\n\n            </Route>\n            <Route exact path='*'>\n\n              <AuthCodeProvider\n                authenticationProps={authProps}\n                history={props.history}\n                authenticationRequired={true}\n                doLogout={doLogout}\n                enableDebugLog={true}\n                onTokenObtained={(data) => setTokenLoaded(data)}\n                onTokenObtainedError={(error) => setTokenLoaded(error)}\n                returnTo={'/authrequired'}\n                cookiePath={'/react-oauth2-authcode-provider'}\n              >\n                <Switch>\n                  <Route path='/authrequired'>\n                    <h3>Auth Required</h3>\n                    <span style={{fontStyle: 'italic'}}>\n                      This page requires you to be logged in. It's content only shows when you are logged in.\n                    </span>\n                    {loginstatus}\n                    {pageinfo}\n                  </Route>\n                  <Route path='/callback'>\n                    {/* callback route */}\n                  </Route>\n                </Switch>\n              </AuthCodeProvider>\n              \n            </Route>\n          </Switch>\n      </div>\n    </div>\n  )\n\n}\n\nexport default withRouter(App)\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router basename={'react-oauth2-authcode-provider'}><App /></Router>, document.getElementById('root'))\n"],"sourceRoot":""}